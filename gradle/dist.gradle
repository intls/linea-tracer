/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import de.undercouch.gradle.tasks.download.Download

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

version = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : 'snapshot'

def lineaBesuDistTar = new File(new File(buildDir, "downloads"), rootProject.besuFilename)
tasks.register('downloadLineaBesu', Download) {
  src rootProject.besuUrl
  dest lineaBesuDistTar
  onlyIfModified true
}

tasks.register('copyLocalLineaBesu', Copy) {
  onlyIf {
    downloadLineaBesu.state.failure
  }
  def localLineaBesuDir =
          project.hasProperty('useLocalLineaBesuDir')
                  ? file("${findProperty('useLocalLineaBesuDir')}".replaceFirst('^~', System.getProperty('user.home')))
                  : new File(projectDir, "../../linea-besu")

  def localLineaBesuFile = new File("${localLineaBesuDir.absoluteFile}/build/distributions/${rootProject.besuFilename}")
  doFirst {
    if (!file(localLineaBesuFile).exists()) {
      throw new GradleException("Could not download Linea Besu distribution from: " + rootProject.besuUrl +
              ", and could not find it locally at ${localLineaBesuFile} either")
    }
  }
  from localLineaBesuFile
  into lineaBesuDistTar.parentFile
}

task unTarLineaBesu(type: Copy) {
  dependsOn downloadLineaBesu
  dependsOn copyLocalLineaBesu

  from tarTree(lineaBesuDistTar)
  into lineaBesuDistTar.parentFile
}

// Get all the dependencies that are provided by Besu, removing the version and suffix
def lineaBesuLibDir = new File(lineaBesuDistTar.parentFile, rootProject.besuIdentifier + '/lib')
def lineaBesuLibs = []
fileTree(dir: lineaBesuLibDir, include: '*.jar').visit {
  FileVisitDetails details ->
    def libPrefix = details.file.name =~ dependencyNamePattern()
    lineaBesuLibs << libPrefix[0][1]
}

def excludeBesuProvidedDeps = {
  // include the dependency in the jar only if it is not already provided by Besu
  def libName = it.name =~ dependencyNamePattern()
  def libPrefix = libName[0][1]
  !lineaBesuLibs.contains(libPrefix)
}

jar {
  dependsOn unTarLineaBesu
  archiveBaseName = distributionIdentifier

  manifest {
    attributes(
      'Specification-Title': archiveBaseName.get(),
      'Specification-Version': rootProject.version,
      'Implementation-Title': archiveBaseName.get(),
      'Implementation-Version': calculateVersion()
    )
  }


  from {
    configurations.pluginClasspath.filter(excludeBesuProvidedDeps
).collect {
      it.isDirectory() ? it : zipTree(it) }
  }
  duplicatesStrategy('exclude')
}

// Takes the version, and if -SNAPSHOT is part of it replaces SNAPSHOT
// with the git commit version.
def calculateVersion() {
  String version = rootProject.version
  if (version.endsWith("-SNAPSHOT")) {
    version = version.replace("-SNAPSHOT", "-dev-${getCheckedOutGitCommitHash()}")
  }

  return version
}

/**
 * Create a distribution of the plugin, that only contains the plugin jar and the
 * dependencies that are not provided by Besu itself, so that is can be simply
 * extracted in the Besu plugins dir.
 */
tasks.register('distPlugin', Zip) {
  dependsOn installDist

  archiveBaseName = distributionIdentifier

  from("${buildDir}/libs/${distributionIdentifier}-${calculateVersion()}.jar")
  from {
    configurations.pluginClasspath.filter(
            excludeBesuProvidedDeps)

  }
}

static def getCheckedOutGitCommitHash() {
  def hashLength = 8
  "git rev-parse HEAD".execute().text.take(hashLength)
}

static def dependencyNamePattern() {
  /(.*)(\-.*?)\.jar/
}